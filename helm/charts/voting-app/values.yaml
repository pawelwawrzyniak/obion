global:
  cluster: "voting-app"
  env: "devops"
  voting-app:
    image:
      tag: "1.0.0"
  worker:
    image:
      tag: "1.0.0"
  result-app:
    image:
      tag: "1.0.0"
  region:
    name: "us-east-1"

voting-app:
  enabled: true
worker:
  enabled: true
result-app:
  enabled: true

aws-load-balancer-controller:
  clusterName: "voting-app"
  serviceAccount.create: false
  replicaCount: 3
  # watchNamespace: true
  # syncPeriod: 3m

# external_dns_role:
#   arn: "###EXTERNAL_DNS_ROLE###"

# nfs-subdir-external-provisioner:
#   nfs:
#     server: "###NFS_MOUNT_POINT###"
#     path: /
#   replicaCount: ###NFS-SUBDIR-EXTERNAL-PROVISIONER_REPLICA_COUNT###

postgresql:
  global:
    storageClass: "standard"
  primary:
    persistence:
      ## @param primary.persistence.enabled Enable PostgreSQL Primary data persistence using PVC
      ##
      enabled: false
      existingClaim: ""

redis:
  global:
    storageClass: ""
    redis:
      password: ""
  clusterDomain: cluster.local
  image:
    registry: docker.io
    repository: bitnami/redis
    tag: 6.2.6-debian-10-r21
    pullPolicy: IfNotPresent
    debug: false
  architecture: replication
  auth:
    enabled: false
    sentinel: false
  master:
    disableCommands: []
    preExecCmds: []
    ## @param master.extraFlags Array with additional command line flags for Redis&trade; master
    ## e.g:
    ## extraFlags:
    ##  - "--maxmemory-policy volatile-ttl"
    ##  - "--repl-backlog-size 1024mb"
    containerPort: 6379
    updateStrategy:
      type: RollingUpdate
      rollingUpdate: {}
    priorityClassName: ""
    affinity:
      nodeAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          nodeSelectorTerms:
            - matchExpressions:
              - key: node_usage
                operator: NotIn
                values:
                  - cron
                  - jms
    persistence:
      enabled: false
      path: /data
      size: 8Gi
      existingClaim: "redis-data-pvc"
    service:
      type: ClusterIP
      port: 6379
    terminationGracePeriodSeconds: 30
  replica:
    replicaCount: 0
    disableCommands: []
    containerPort: 6379
    resources:
      limits: {}
      #   cpu: 250m
      #   memory: 256Mi
      requests: {}
      #   cpu: 250m
      #   memory: 256Mi
    priorityClassName: ""
    affinity:
      nodeAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          nodeSelectorTerms:
            - matchExpressions:
              - key: node_usage
                operator: NotIn
                values:
                  - cron
                  - jms
    persistence:
      enabled: false
      path: /data
      size: 8Gi
    service:
      type: ClusterIP
      port: 6379
    autoscaling:
      enabled: false
  sentinel:
    enabled: false
  networkPolicy:
    enabled: false
  podSecurityPolicy:
    create: false
    enabled: false
  rbac:
    create: false
  tls:
    enabled: false
    authClients: true
    autoGenerated: false
  metrics:
    enabled: false
  sysctl:
    enabled: false
    mountHostSys: false
    resources:
      limits: {}
      requests: {}
